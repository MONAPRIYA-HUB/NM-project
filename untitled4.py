# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QJM2YjK8xuGlG9piDQHF9s6430IJRqRG
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Movie dataset with titles and genres
movies = pd.DataFrame({
    'title': [
        'Inception', 'The Matrix', 'Interstellar', 'The Dark Knight',
        'Shutter Island', 'Memento', 'Blade Runner', 'Tenet', 'Fight Club', 'Arrival'
    ],
    'genre': [
        'Sci-Fi Thriller', 'Sci-Fi Action', 'Sci-Fi Drama', 'Action Crime',
        'Thriller Mystery', 'Mystery Thriller', 'Sci-Fi Noir', 'Sci-Fi Action',
        'Drama Mystery', 'Sci-Fi Drama'
    ]
})

# Vectorize genres using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english')
genre_matrix = vectorizer.fit_transform(movies['genre'])

# Calculate cosine similarity matrix
similarity = cosine_similarity(genre_matrix, genre_matrix)

# Movie recommendation function
def recommend(movie_title, num_recommendations=3):
    if movie_title not in movies['title'].values:
        return f"Movie '{movie_title}' not found in database."
    index = movies[movies['title'] == movie_title].index[0]
    sim_scores = list(enumerate(similarity[index]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:num_recommendations+1]
    recommendations = [movies['title'][i] for i, score in sim_scores]
    return recommendations

# Example usage
user_input = input("Enter a movie you like: ")
results = recommend(user_input, 5)

print(f"\nTop recommendations for '{user_input}':")
if isinstance(results, list):
    for i, movie in enumerate(results, 1):
        print(f"{i}. {movie}")
else:
    print(results)